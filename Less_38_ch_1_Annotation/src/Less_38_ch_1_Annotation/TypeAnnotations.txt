******* Аннотации типов и подключаемые системы типов *******

До выхода Java SE 8 аннотации можно было применять только к объявлениям.
Начиная с версии Java SE 8, стало возможным применять аннотации к любому
типу использования. Это означает, что аннотации можно использовать везде,
где мы используем тип. Несколько примеров использования типов:
- создания экземпляра класса (новые),
- приведения типов,
- реализация интерфейсов и ограничений,
- генерация исключений.
Такая форма аннотации называется аннотацией типа.

Аннотации типов были созданы для поддержки улучшенного анализа программ
Java и обеспечения более строгой проверки типов. Версия Java SE 8 не
предоставляет инфраструктуру проверки типов, но позволяет написать
(или загрузить) инфраструктуру проверки типов, реализованную в виде одного
или нескольких подключаемых модулей, которые используются вместе с
компилятором Java.

Например, мы хотим гарантировать, что конкретной переменной в нашей программе
никогда не будет присвоено значение null; мы хотим избежать выброса исключения
NullPointerException. Тогда мы можем написать собственный плагин для проверки
этого. Затем мы должны изменить свой код, чтобы аннотировать эту конкретную
переменную, указав, что ей никогда не присваивается значение null.
Объявление переменной может выглядеть так:
------------------------------------------------------------------------------
@NonNull String str;
------------------------------------------------------------------------------

Когда мы компилируем код, включая модуль NonNull в командной строке, компилятор
выводит предупреждение, если обнаруживает потенциальную проблему, позволяя нам
изменить код, чтобы избежать ошибки. После того, как мы исправим код, чтобы удалить
все предупреждения, эта конкретная ошибка не будет возникать при запуске программы.

Мы можем использовать несколько модулей проверки типов, где каждый модуль проверяет
наличие разных типов ошибок. Таким образом, мы можем создавать надстройки поверх
системы типов Java, добавляя определенные проверки, когда и где мы хотим.

При разумном использовании аннотаций типов и наличии подключаемых средств проверки
типов мы можем писать более надежный и менее подверженный ошибкам код.

Во многих случаях нам не нужно писать собственные модули проверки типов. Есть уже
готовые решения, которые сделали работу за нас. Например, мы можем воспользоваться
преимуществами Checker Framework, созданной Вашингтонским университетом. Эта структура
включает модуль NonNull, а также модуль регулярных выражений и модуль блокировки
мьютекса. И подобных разработок много.