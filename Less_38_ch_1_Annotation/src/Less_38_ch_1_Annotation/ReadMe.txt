******* Annotation - Аннотации *******

Аннотации, форма метаданных, предоставляют данные о программе, которые
не являются частью самой программы. Аннотации не имеют прямого влияния
на работу кода, который они аннотируют.

Аннотации имеют ряд применений, среди них:

- Информация для компилятора — аннотации могут использоваться компилятором
  для обнаружения ошибок или подавления предупреждений;
- Обработка во время компиляции и во время развертывания — программные средства
  могут обрабатывать информацию аннотаций для создания кода, XML-файлов и т.д.;
- Обработка во время выполнения — некоторые аннотации доступны для просмотра во
  время выполнения;

В этом уроке объясняется, где можно использовать аннотации, как применять аннотации,
какие предопределенные типы аннотаций доступны на платформе Java, Standard Edition
(Java SE API), как можно использовать аннотации типов в сочетании с подключаемыми
системами типов для написания кода с более сильными ограничениями, проверка типов и
как реализовать повторяющиеся аннотации.

******* Формат аннотации *******

В самом простом виде аннотация выглядит следующим образом: @Entity
Символ собачки (@) указывает компилятору, что далее следует аннотация.

В следующем примере имя аннотации — Override:
-------------------------------------------------------------------------------------
@Override
void mySuperMethod() { some code ... }
-------------------------------------------------------------------------------------

Аннотация может включать элементы, которые могут быть именованными или
безымянными, и для этих элементов есть значения:
-------------------------------------------------------------------------------------
@Author(
   name = "Benjamin Franklin",
   date = "3/27/2003"
)
class MyClass { some code ... }
-------------------------------------------------------------------------------------
или
-------------------------------------------------------------------------------------
@SuppressWarnings(value = "unchecked")
void myMethod() { some code ... }
-------------------------------------------------------------------------------------

Если есть только один элемент с именем value, то имя можно опустить, например:
-------------------------------------------------------------------------------------
@SuppressWarnings("unchecked")
void myMethod() { some code ... }
-------------------------------------------------------------------------------------

Если в аннотации нет элементов, скобки можно опустить, как показано в предыдущем
примере @Override. Также можно использовать несколько аннотаций в одном объявлении:
-------------------------------------------------------------------------------------
@Author(name = "Jane Doe")
@EBook
class MyClass { ... }
-------------------------------------------------------------------------------------

Если аннотации имеют одинаковый тип, то это называется повторяющейся аннотацией:
-------------------------------------------------------------------------------------
@Author(name = "Jane Doe")
@Author(name = "John Smith")
class MyClass { ... }
-------------------------------------------------------------------------------------

Повторяющиеся аннотации поддерживаются начиная с версии Java SE 8.
(Более подробно см. RepeatingAnnotations.txt)

Тип аннотации может быть одним из типов, определенных в пакетах java.lang или
java.lang.annotation API Java SE. В предыдущих примерах @Override и @SuppressWarnings
являются предопределенными аннотациями Java. Также возможно определить свой собственный
тип аннотации. Аннотации @Author и @Ebook в предыдущих примерах являются пользовательскими
типами аннотаций.

******* Применение аннотаций *******

Аннотации можно применять к объявлениям: классов, полей, методов и других элементов
программы. При использовании в объявлении каждая аннотация по соглашению часто
появляется на отдельной строке.

Начиная с версии Java SE 8 аннотации также можно применять к использованию типов.
Вот некоторые примеры:
-------------------------------------------------------------------------------------
Аннотация на создание экземпляра класса:
    new @Interned MyObject();

Аннотация кастомизации типа:
    myString = (@NonNull String) str;

Аннотация на реализацию неких ограничений (оговорок, условий) :
    class UnmodifiableList<T> implements
        @Readonly List<@Readonly T> { ... }

Аннотация на выбрасываемое исключение:
    void monitorTemperature() throws
        @Critical TemperatureException { ... }
-------------------------------------------------------------------------------------
В данном случае аннотации называются аннотациями типа.
(Дополнительные сведения см. TypeAnnotations.txt)

-------------------------------------------------------------------------------------
Кратко см. https://docs.oracle.com/javase/tutorial/java/annotations/index.html

