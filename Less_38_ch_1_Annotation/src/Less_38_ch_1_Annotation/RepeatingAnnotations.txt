******* RepeatingAnnotations.txt - Повторяющиеся аннотации *******

В некоторых ситуациях мы можем применить одну и ту же аннотацию к
объявлению или использованию типа. Начиная с версии Java SE 8,
повторяющиеся аннотации позволяют это делать.

Например, мы пишем код для использования службы таймера, которая
позволяет запускать метод в заданное время или по определенному
расписанию, подобно службе cron UNIX. Теперь мы хотим установить
таймер для запуска метода *.doPeriodicCleanup() в последний день
месяца и каждую пятницу в 23:00. Чтобы настроить запуск таймера,
мы создаем аннотацию @Schedule и дважды примените ее к методу
*.doPeriodicCleanup(). Первое использование указывает последний
день месяца, а второе указывает пятницу в 23:00, как показано в
следующем примере кода:
----------------------------------------------------------------------
@Schedule(dayOfMonth="last")
@Schedule(dayOfWeek="Fri", hour="23")
public void doPeriodicCleanup() { some code ... }
----------------------------------------------------------------------

В предыдущем примере аннотация применяется к МЕТОДУ.

Мы можем повторить аннотацию в любом месте, где бы мы хотели использовать
стандартную аннотацию. Например, у нас есть КЛАСС для обработки исключений
несанкционированного доступа.

Мы аннотируем КЛАСС одной аннотацией @Alert для менеджеров и другой для
администраторов:
----------------------------------------------------------------------
@Alert(role="Manager")
@Alert(role="Administrator")
public class UnauthorizedAccessException extends SecurityException { ... }
----------------------------------------------------------------------

По соображениям совместимости повторяющиеся аннотации хранятся в контейнере
аннотаций, который автоматически создается компилятором Java. Чтобы компилятор
это сделал, в нашем коде требуется два объявления:

- Шаг 1. Объявляем повторяющийся тип аннотации.
Тип аннотации должен быть помечен мета-аннотацией @Repeatable.
В следующем примере определяется пользовательский тип повторяемой
аннотации @Schedule:
----------------------------------------------------------------------
import java.lang.annotation.Repeatable;

@Repeatable(Schedules.class)
public @interface Schedule {
  String dayOfMonth() default "first";
  String dayOfWeek() default "Mon";
  int hour() default 12;
}
----------------------------------------------------------------------

Значение мета-аннотации @Repeatable в круглых скобках представляет собой
тип аннотации контейнера, которую компилятор Java генерирует для хранения
повторяющихся аннотаций. В этом примере содержащим типом аннотации являются
Schedules, поэтому повторяющиеся аннотации @Schedule хранятся в аннотации
@Schedules.

Применение одной и той же аннотации к объявлению без предварительного
объявления повторяемости приводит к compile-time error.

- Шаг 2. Объявляем содержащий тип аннотации.
Содержащий тип аннотации должен иметь элемент со значением типа массива.
Тип компонента массива должен быть типом повторяемой аннотации. Например,
объявление для Schedules, содержащих тип аннотаций, выглядит следующим
образом:
----------------------------------------------------------------------
public @interface Schedules {
    Schedule[] value();
}
----------------------------------------------------------------------

******* Получение аннотаций *******

В Reflection API доступно несколько методов, которые можно использовать для
извлечения аннотаций. Поведение методов, возвращающих одну аннотацию, таких
как AnnotatedElement.getAnnotation(Class<T>), не изменилось: они возвращают
одну аннотацию, только если присутствует одна аннотация запрошенного типа.

Если присутствует более одной аннотации запрошенного типа, мы можем получить их,
предварительно получив их контейнер аннотацию. Таким образом, устаревший код
продолжает работать.

В Java SE 8 были введены другие методы, которые сканируют аннотацию контейнера
для одновременного возврата нескольких аннотаций, например
AnnotatedElement.getAnnotationsByType(Class<T>). См. спецификацию класса
getAnnotationsByType.txt для получения информации обо всех доступных методах.

******* Рекомендации по созданию собственных аннотаций *******

При разработке типа аннотаций необходимо учитывать направленность аннотаций
разрабатываемого типа. Мы можем использовать аннотацию ноль раз, один раз или,
если тип аннотации помечен как @Repeatable, более одного раза. Также можно
ограничить использование типа аннотации с помощью мета-аннотации @Target.
Например, мы можем создать повторяющийся тип аннотации, который можно использовать
только для методов и/или полей. Важно тщательно спроектировать тип аннотации,
чтобы программист, использующий аннотацию, счел ее максимально гибкой и мощной.
